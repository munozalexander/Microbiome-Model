from __future__ import division
from collections import Counter
import random
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import time
from copy import deepcopy


##### FLAGS #####
'''
homeostasis_flag:       the condition in which the model is being simulated,
                        as follows
                        * 0 : normal, healthy homeostasis
                        * 1 : normal, healthy homeostasis presented with
                        infection
                        * 2 : normal, healthy homeostasis plus wide-range
                        antibiotic treatment, followed by infection
                        * 3 : overactive immune system (hypersensitivivity)
                        followed by infection
                        * 4 : normal, healthy homeostasis presented with
                        infection; followed up with fecal bacteriotherapy
                        transplant
                        * 5 : Cesarean section baby presented with infection
output_flag:            select the desired output to be generated by the
                        simulation as follows
                        * 0 : print at every timestep
                        * 1 : display animated heatmap

'''
homeostasis_flag = 0
output_flag = 1


##### PARAMETERS #####
'''
tissue_shape:           length of the square tissue patch, each subdivided unit
                        square can fit 1 bacterium
init_percent_full:      average percent of tissue that will have a bacterium at
                        initialization
subpop_types_count:     number of subpopulations included in the model. For
                        this model we will use 5 subpopulations as follows
                        * 0 : empty
                        * 1 : faecalibacterium prausnitzii
                        * 2 : bacteroides fragilis
                        * 3 : other commensal bacteria
                        * 4 : clostridium difficile (pathogenic bacteria)
init_subpop_cummprob:   probability of initializing into each of the subpops
growth_subpop_prob:     probability of each subpopulation dividing
death_subpop_prob:      probability of each subpopulation dying
antibiotic_eff:         efficacy of wide-range antibiotics (little prefernce
                        for bacterial domain, targets both commensal and
                        pathogenic bacteria)
immune_eff:             efficacy for hypersensitive immune system (overactive
                        immune system that targets commensal flora)
time_steps              number of timesteps to run
'''
tissue_shape = 5
subpop_types_count = 5
init_percent_full = 0.2
init_subpop_cummprob = [0, .1, .2, 1, 0] #probabilities of 0, .1, .1, .8, 0
growth_subpop_prob = [0] + ([.01] * (subpop_types_count - 1))
death_subpop_prob = [0] + ([.005] * (subpop_types_count - 1))
antibiotic_eff = 0.4
immune_eff = 0.2
time_steps = 10


##### INITIALIZE #####
tissue_patch = [[]]
tissue_patch_history = []


##### FUNCTIONALITY #####
def init_bacteria():
    ''' Initialize gut patch with some bacteria '''
    global tissue_patch
    tissue_patch = [[0 for i in range(tissue_shape)] for j in range(tissue_shape)]
    for row_num in range(tissue_shape): #loop over tissue
        for col_num in range(tissue_shape):
            if random.random() < init_percent_full:
                r = random.random()
                for k in range(tissue_shape):
                    if r < init_subpop_cummprob[k]:
                        tissue_patch[row_num][col_num] = k
                        break

def divide():
    ''' Bacteria can divide if there is an available spot '''
    global tissue_patch
    possible_transitions = [] #list possible neighbors
    for t1 in [-1,0,1]:
        for t2 in [-1,0,1]:
            if t1 != 0 or t2 != 0:
                possible_transitions.append((t1,t2))
    for row_num in range(tissue_shape): #loop over tissue
        for col_num in range(tissue_shape):
            curr = tissue_patch[row_num][col_num]
            for t1,t2 in possible_transitions:
                if random.random() < growth_subpop_prob[curr]:
                    try:
                         if  tissue_patch[row_num + t1][col_num + t2] == 0:
                             tissue_patch[row_num + t1][col_num + t2] = curr
                    except IndexError:
                        pass

def death():
    ''' Bacteria have a chance of dying at each timestep '''
    global tissue_patch
    for row_num in range(tissue_shape): #loop over tissue
        for col_num in range(tissue_shape):
            curr = tissue_patch[row_num][col_num]
            if curr != 0 and random.random() < death_subpop_prob[curr]:
                tissue_patch[row_num][col_num] = 0

def infect():
    ''' Infect the tissue patch with the C. Diff pathogen '''
    global tissue_patch
    m = tissue_shape // 2
    tissue_patch[m][m] = 4

def attack(antibiotic = True):
    ''' Attack bacteria in GI tract with wide-range antiobiotic (antibiotic =
    true) or with immune system (antibiotic = false)'''
    global tissue_patch
    for row_num in range(tissue_shape): #loop over tissue
        for col_num in range(tissue_shape):
            eff = antibiotic_eff if antibiotic else immune_eff
            if random.random() < eff:
                tissue_patch[row_num][col_num] = 0

def fecal_transplant():
    ''' Fecal bacteriotherapy transplant, transplant healthy bacteria from
    donor, supplementing commensal flora populations'''
    global tissue_patch
    for row_num in range(tissue_shape): #loop over tissue
        for col_num in range(tissue_shape):
            if random.random() < init_percent_full:
                r = random.random()
                for k in range(tissue_shape):
                    if r < init_subpop_cummprob[k]:
                        tissue_patch[row_num][col_num] = k
                        break

def print_tissue(tissue = [[]]):
    ''' Print the tissue patch '''
    global tissue_patch
    patch_to_print = tissue_patch if tissue == [[]] else tissue
    counter = Counter() #count bacteria in various subpopulations
    for subpop_num in range(subpop_types_count):
        counter[subpop_num] = 0
    for row_num in range(tissue_shape): #loop over tissue
        for col_num in range(tissue_shape):
            counter[patch_to_print[row_num][col_num]] += 1
    print "Subpop breakdown:\n|",
    for i in range(subpop_types_count):
        print "%i: %i |" % (i, counter[i]),
    print "\n\nTissue patch:"
    for row in patch_to_print: #print patch
        print row
    print

def record_patch_state():
    ''' Record current state of the tissue patch '''
    global tissue_patch, tissue_patch_history
    current_patch = deepcopy(tissue_patch) #pass by value, not by reference
    tissue_patch_history.append(current_patch)

def heatmap():
    ''' Plot a heatmap of the tissue patch '''
    global tissue_patch
    fig = plt.figure()
    plot = plt.matshow(tissue_patch, fignum=0)
    plt.colorbar(ticks=range(subpop_types_count))
    plt.show()

def heatmap_init():
    plot.set_data(tissue_patch_history[0])
    return plot

def heatmap_update(curr_t):
    ''' Animate heatmap '''
    im.set_data(tissue_patch_history[curr_t])
    return im,


##### MAIN #####
if __name__ == "__main__":
    # homeostasis flags
    if homeostasis_flag == 0: #healthy
        init_bacteria()
        record_patch_state()
        for current_time in range(time_steps):
            divide()
            death()
            record_patch_state()
    elif homeostasis_flag == 1: #healthy, infection
        pass
    elif homeostasis_flag == 2: #antibiotic treatment
        pass
    elif homeostasis_flag == 3: #hypersensitive immune system
        pass
    elif homeostasis_flag == 4: #fecal transplant
        pass
    elif homeostasis_flag == 5: #Cesarean section
        pass

    # output flags
    if output_flag == 0: #print to console
        for i in range(time_steps):
            print "Time step: %i" % i
            print_tissue(tissue_patch_history[i])
    elif output_flag == 1: #heatmap animation
        fig = plt.figure()
        im = plt.matshow(tissue_patch_history[0], fignum=0)
        plt.colorbar(im, ticks=[0,1,2,3,4])
        anim = animation.FuncAnimation(fig, heatmap_update, frames=time_steps, interval=100, blit=False)
        fname = 'animations/' + time.strftime('%b%d_%H_%M_%S') + '.mp4'
        anim.save(fname)
        plt.show()
