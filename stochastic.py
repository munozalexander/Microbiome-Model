from __future__ import division
from collections import Counter
import random
from random import shuffle
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import time
from copy import deepcopy


##### FLAGS #####
'''
homeostasis_flag:       the condition in which the model is being simulated,
                        as follows
                        * 0 : normal, healthy homeostasis
                        * 1 : normal, healthy homeostasis presented with
                        infection
                        * 2 : normal, healthy homeostasis plus wide-range
                        antibiotic treatment, followed by infection
                        * 3 : overactive immune system (hypersensitivivity)
                        followed by infection
                        * 4 : normal, healthy homeostasis presented with
                        infection; followed up with fecal bacteriotherapy
                        transplant
                        * 5 : Cesarean section baby presented with infection
output_flag:            select the desired output to be generated by the
                        simulation as follows
                        * 0 : print at every timestep
                        * 1 : display animated heatmap
                        * 2 : display 2 heatmaps for initial and final states
                        * 3 : subpopulation line graphs

'''
homeostasis_flag = 2
output_flag = 3


##### PARAMETERS #####
'''
tissue_shape:           length of the square tissue patch, each subdivided unit
                        square can fit 1 bacterium
init_percent_full:      average percent of tissue that will have a bacterium at
                        initialization
subpop_types_count:     number of subpopulations included in the model. For
                        this model we will use 5 subpopulations as follows
                        * 0 : empty
                        * 1 : faecalibacterium prausnitzii
                        * 2 : bacteroides fragilis
                        * 3 : other commensal bacteria
                        * 4 : clostridium difficile (pathogenic bacteria)
init_subpop_cummprob:   probability of initializing into each of the subpops
growth_subpop_prob:     probability of each subpopulation dividing
death_subpop_prob:      probability of each subpopulation dying
antibiotic_eff:         efficacy of wide-range antibiotics (little prefernce
                        for bacterial domain, targets both commensal and
                        pathogenic bacteria)
immune_eff:             efficacy for hypersensitive immune system (overactive
                        immune system that targets commensal flora)
time_steps:             number of timesteps to run
'''
tissue_shape = 100
subpop_types_count = 5
init_percent_full = 0.2
init_subpop_cummprob = [0, .1, .2, 1, 0] #probabilities of 0, .1, .1, .8, 0
growth_subpop_prob = [0, .086, .039, .063, .063] #scaled by .1
death_subpop_prob = [0, .086, .039, .063, .01]
antibiotic_eff = 0.9
immune_eff = 0.174
time_steps = 48 #2 days


##### INITIALIZE #####
tissue_patch = [[]]
tissue_patch_history = []


##### FUNCTIONALITY #####
def init_bacteria():
    ''' Initialize gut patch with some bacteria '''
    global tissue_patch
    tissue_patch = [[0 for i in range(tissue_shape)] for j in range(tissue_shape)]
    for row_num in range(tissue_shape): #loop over tissue
        for col_num in range(tissue_shape):
            if random.random() < init_percent_full:
                r = random.random()
                for k in range(tissue_shape):
                    if r < init_subpop_cummprob[k]:
                        tissue_patch[row_num][col_num] = k
                        break

def divide():
    ''' Bacteria pick 3 random directions and try to divide '''
    global tissue_patch
    possible_transitions = [] #list possible neighbors
    for t1 in [-1,0,1]:
        for t2 in [-1,0,1]:
            if t1 != 0 or t2 != 0:
                possible_transitions.append((t1,t2))
    shuffle(possible_transitions) #randomize directions
    for row_num in range(tissue_shape): #loop over tissue
        for col_num in range(tissue_shape):
            curr = tissue_patch[row_num][col_num]
            if curr != 0 and random.random() < growth_subpop_prob[curr]:
                for t1,t2 in possible_transitions[:3]:
                    try:
                        if tissue_patch[row_num + t1][col_num + t2] == 0:
                            tissue_patch[row_num + t1][col_num + t2] = curr
                            break
                    except IndexError:
                        pass

def death():
    ''' Bacteria have a chance of dying at each timestep '''
    global tissue_patch
    for row_num in range(tissue_shape): #loop over tissue
        for col_num in range(tissue_shape):
            curr = tissue_patch[row_num][col_num]
            if curr != 0 and random.random() < death_subpop_prob[curr]:
                tissue_patch[row_num][col_num] = 0

def infect():
    ''' Infect the tissue patch with the C. Diff pathogen '''
    global tissue_patch
    m = tissue_shape // 2
    tissue_patch[m][m] = 4

def attack(antibiotic = True):
    ''' Attack bacteria in GI tract with wide-range antiobiotic (antibiotic =
    true) or with immune system (antibiotic = false)'''
    global tissue_patch
    for row_num in range(tissue_shape): #loop over tissue
        for col_num in range(tissue_shape):
            eff = antibiotic_eff if antibiotic else immune_eff
            if random.random() < eff:
                tissue_patch[row_num][col_num] = 0

def fecal_transplant():
    ''' Fecal bacteriotherapy transplant, transplant healthy bacteria from
    donor, supplementing commensal flora populations'''
    global tissue_patch
    for row_num in range(tissue_shape): #loop over tissue
        for col_num in range(tissue_shape):
            if random.random() < init_percent_full:
                r = random.random()
                for k in range(tissue_shape):
                    if r < init_subpop_cummprob[k]:
                        tissue_patch[row_num][col_num] = k
                        break

def print_tissue(tissue = [[]]):
    ''' Print the tissue patch '''
    global tissue_patch
    patch_to_print = deepcopy(tissue_patch) if tissue == [[]] else tissue
    counter = Counter() #count bacteria in various subpopulations
    for subpop_num in range(subpop_types_count):
        counter[subpop_num] = 0
    for row_num in range(tissue_shape): #loop over tissue
        for col_num in range(tissue_shape):
            counter[patch_to_print[row_num][col_num]] += 1
    print "Subpop breakdown:\n|",
    for i in range(subpop_types_count):
        print "%i: %i |" % (i, counter[i]),
    print "\n\nTissue patch:"
    for row in patch_to_print: #print patch
        print row
    print

def record_patch_state():
    ''' Record current state of the tissue patch '''
    global tissue_patch, tissue_patch_history
    current_patch = deepcopy(tissue_patch) #pass by value, not by reference
    tissue_patch_history.append(current_patch)

def two_heatmaps(t_initial=0, t_final=-1):
    ''' Plot static heatmaps of the initial and final tissue patch states '''
    global tissue_patch_history
    f, (ax1, ax2) = plt.subplots(1, 2)
    plt.axis('off')
    im1 = ax1.matshow(tissue_patch_history[t_initial], vmin=0, vmax=4)
    cb1 = plt.colorbar(im1, ticks=[0,1,2,3,4], ax=ax2, fraction=0.046, pad=0.04)
    ax1.set_xticks([])
    plt.axis('off')
    cb1.set_label('Subpopulation Number')
    fig_title = get_fig_title()
    ax1.set_title('Initial Time')
    im2 = ax2.matshow(tissue_patch_history[t_final], vmin=0, vmax=4)
    ax2.set_title('Final Time')
    ax2.set_xticks([])
    plt.axis('off')
    fname = 'heatmaps/' + time.strftime('%b%d_%H_%M_%S') + '.png'
    plt.tight_layout()
    plt.savefig(fname)
    plt.show()

def heatmap_update(curr_t):
    ''' Animate heatmap '''
    im.set_data(tissue_patch_history[curr_t])
    return im,

def prettify_ax(ax):
    ''' Nifty function we can use to make our axes more pleasant to look at
        credit Adrian Veres '''
    for spine in ax.spines.itervalues():
        spine.set_visible(False)
    ax.set_frameon=True
    ax.patch.set_facecolor('#eeeeef')
    ax.grid('on', color='w', linestyle='-', linewidth=1)
    ax.tick_params(direction='out')
    ax.set_axisbelow(True)

def simple_ax(figsize=(10,8), **kwargs):
    ''' Shortcut to make and 'prettify' a simple figure with 1 axis '''
    fig = plt.figure(figsize=figsize)
    ax = fig.add_subplot(111, **kwargs)
    prettify_ax(ax)
    return fig, ax

def get_fig_title():
    ''' Create a figure title with current simulation homeostasis condition '''
    fig_title = ''
    if homeostasis_flag == 0:
        fig_title = 'Healthy'
    elif homeostasis_flag == 1:
        fig_title = 'Healthy Plus Infection'
    elif homeostasis_flag == 2:
        fig_title = 'Antibiotic Treatment Plus Infection'
    elif homeostasis_flag == 3:
        fig_title = 'Hypersensitive Immune System Plus Infection'
    elif homeostasis_flag == 4:
        fig_title = 'Infection Plus Fecal Bacteriotherapy Transplant'
    elif homeostasis_flag == 5:
        fig_title = 'Cesarean Section Plus Infection'
    return fig_title


##### MAIN #####
if __name__ == "__main__":
    # homeostasis flags
    if homeostasis_flag == 0: #healthy
        init_bacteria()
        record_patch_state()
        for current_time in range(time_steps):
            divide()
            death()
            record_patch_state()
    elif homeostasis_flag == 1: #healthy, infection
        init_bacteria()
        record_patch_state()
        for current_time in range(5):
            divide()
            death()
            record_patch_state()
        infect()
        for current_time in range(time_steps - 5):
            divide()
            death()
            record_patch_state()
    elif homeostasis_flag == 2: #antibiotic treatment
        init_bacteria()
        record_patch_state()
        for current_time in range(5):
            divide()
            death()
            record_patch_state()
        attack(antibiotic=True)
        infect()
        for current_time in range(time_steps - 5):
            divide()
            death()
            record_patch_state()
    elif homeostasis_flag == 3: #hypersensitive immune system
        init_bacteria()
        infect()
        record_patch_state()
        for current_time in range(time_steps):
            divide()
            death()
            attack(antibiotic=False)
            record_patch_state()
    elif homeostasis_flag == 4: #fecal transplant
        pass
    elif homeostasis_flag == 5: #Cesarean section
        pass

    # output flags
    if output_flag == 0: #print to console
        for i in range(time_steps):
            print "Time step: %i" % i
            print_tissue(tissue_patch_history[i])
    elif output_flag == 1: #heatmap animation
        fig = plt.figure()
        im = plt.matshow(tissue_patch_history[0], vmin=0, vmax=4, fignum=0)
        cb = plt.colorbar(im, ticks=[0,1,2,3,4])
        cb.set_label('Subpopulation Number')
        fig_title = get_fig_title()
        plt.title(fig_title)
        anim = animation.FuncAnimation(fig, heatmap_update, frames=time_steps, interval=100, blit=False)
        fname = 'animations/' + time.strftime('%b%d_%H_%M_%S') + '.mp4'
        anim.save(fname)
        plt.show()
    elif output_flag == 2: #2 static heatmaps for initial and end times
        if homeostasis_flag == 0:
            two_heatmaps()
        elif homeostasis_flag == 1:
            two_heatmaps(t_initial=6)
        elif homeostasis_flag == 2:
            two_heatmaps()
    elif output_flag == 3: #subpop line graphs
        subpop_history = [[] for i in range(subpop_types_count)]
        for time_point in tissue_patch_history:
            counter = Counter() #count bacteria
            for subpop_num in range(subpop_types_count):
                counter[subpop_num] = 0
            for row_num in range(tissue_shape): #loop over tissue
                for col_num in range(tissue_shape):
                    counter[time_point[row_num][col_num]] += 1
            for subpop_num in range(subpop_types_count):
                subpop_history[subpop_num].append(counter[subpop_num])
        f,a = simple_ax()
        labels = ['empty', 'F. prausnitzii','B. fragilis', 'other commensals', 'C. Difficile']
        for subpop_num in range(subpop_types_count):
            a.plot(range(time_steps+1), subpop_history[subpop_num], label = labels[subpop_num])
        a.set_yscale('log', basey=2)
        a.set_xlabel('Time (hours)')
        a.set_ylabel('Subpopulation in tissue patch')
        fig_title = get_fig_title()
        a.set_title(fig_title)
        plt.legend()
        fname = 'plots/' + time.strftime('%b%d_%H_%M_%S') + '.png'
        plt.savefig(fname)
        plt.show()
